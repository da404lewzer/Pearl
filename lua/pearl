
<!-- NO. -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="shortcut icon" href="../../assets/ico/favicon.ico">

    <title>Pearl Cast</title>
    <style type="text/css">
      * {padding: 0; margin: 0;}
      body {overflow-y: hidden}
      #mobileControls {
        display: none;
      }
      .mobile #mobileControls {
        display: block;
        position: fixed;
        left: 0;
        right: 0;
        bottom: 0;
      }
      #containerCanvas {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
      }
      .mobile #containerCanvas {
        bottom: 45px;
      }
      img {
        width: 512px;
        height: 512px;
        /*border: 1px solid black;*/
      }
    </style>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
    <script type="text/javascript">
    
    //i hate it just as much as you but because of cc inputs we need to emulate them on touch devices.. i know i know, lazy
    var isMobile = ( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) );
    
    var cc_loadXMLString = function(){ return false; }
    
    function split(str, separator, limit) {
      str = str.split(separator);

      if(str.length > limit) {
          var ret = str.splice(0, limit);
          ret.push(str.join(separator));

          return ret;
      }
      return str;
  }
      
    var preview = "";
    handlePostMessage = function(e) {
      var tmp = split(e.data, ':', 1);
      if(tmp[0] == 'PREVIEW') {
        preview = tmp[1].trim();
      }else if(tmp[0] == 'DATA') {
        preview += tmp[1].trim();
      }else if(tmp[0] == 'DONE') {
        cc_loadXMLString(preview);
        preview = "";
      }
    }
    window.addEventListener('message', handlePostMessage, false);
    
    $(function(){
    
      if (isMobile){
        $('body').addClass('mobile');
      }
    
      var gameArea = $('#containerCanvas');
      var gameCanvas = document.getElementById('mainCanvas');
      var ctx = gameCanvas.getContext('2d');
            
         
      var cells = {};
      
      var desktopSize = [51, 19];
      var pocketSize = [26, 20];
      
      var cols = desktopSize[0];
      var rows = desktopSize[1];
      var border_width = 0;
      var border_height = 0;
      
      var currentPageID = "<?php printf("%06d", abs($_GET["id"])); ?>";
      var totalLines = 0;
      var pageScroll = 0;
      

      var setPageScroll = function(scroll){

        var pageScrollBefore = pageScroll
        pageScroll = scroll;
        
        if (pageScrollBefore != pageScroll){
          renderDOM();
        }
        
      }
      var getPageScroll = function(tmpScroll){
        var scrollDiff = -(totalLines - rows + 1);
        if (tmpScroll > 0) tmpScroll = 0;
        if (Math.abs(totalLines) > rows-1){
          if (tmpScroll < scrollDiff) tmpScroll = scrollDiff;
        }else{
          tmpScroll = 0;
        }
        return tmpScroll;
      }

      var scrollPage = function(amt){
        setPageScroll(getPageScroll(pageScroll + amt));
      }
      
      var tmpKeyCode = "";
      var updateKeyCode = function(id){        
        if (id == "enter"){
          isKeying = false;
          loadXML(tmpKeyCode);
          tmpKeyCode = "";
        }else if(id == "backspace"){
          if (tmpKeyCode.length > 0){
            tmpKeyCode = tmpKeyCode.substring(0, tmpKeyCode.length - 1);
          }
        }else{
          isKeying = true;
          tmpKeyCode += id;
          if (tmpKeyCode.length == 6){
            updateKeyCode('enter');
          }
        }
        
      }
      
      $( "body" ).on('click', function( event ) {
        if (isMobile){
        
          if (event.clientY > gameCanvas.height /2){
            scrollPage(-1);
          }else{
            scrollPage(1);
          }
        
        }
      });
      
      if (isMobile){
        $( "#gotime" ).click(function( event ) {
          loadXML( parseInt($( "#mobileLoader" ).val()) || 0 );
          $( "#mobileLoader" ).val('');
        });
      
      }else{
        $( "body" ).keydown(function( event ) {
          if ( event.which == 38 ||  event.which == 87 ) {
            event.preventDefault();
            scrollPage(1);
          }else if ( event.which == 40 ||  event.which == 83 ) {
            event.preventDefault();
            scrollPage(-1);    
          }else if ( event.which == 49 || event.which == 97 ) { // 1
            updateKeyCode("1");
          }else if ( event.which == 50 || event.which == 98 ) { // 2
            updateKeyCode("2");
          }else if ( event.which == 51 || event.which == 99 ) { // 3
            updateKeyCode("3");
          }else if ( event.which == 52 || event.which == 100 ) { // 4
            updateKeyCode("4");
          }else if ( event.which == 53 || event.which == 101 ) { // 5
            updateKeyCode("5");
          }else if ( event.which == 54 || event.which == 102 ) { // 6
            updateKeyCode("6");
          }else if ( event.which == 55 || event.which == 103 ) { // 7
            updateKeyCode("7");
          }else if ( event.which == 56 || event.which == 104 ) { // 8
            updateKeyCode("8");
          }else if ( event.which == 57 || event.which == 105 ) { // 9
            updateKeyCode("9");
          }else if ( event.which == 48 || event.which == 96 ) { // 0
            updateKeyCode("0");
          }else if ( event.which == 13) { //enter
            updateKeyCode("enter");
          }else if ( event.which == 8) { //backspace
            event.preventDefault();
            updateKeyCode("backspace");
             
          }else{ 
            console.info(event.which);
          }
          
        });
      }
      
      
      var pixels = [];
      
      var resizePixels = function(){  
      
      
        var desktopSize = [51, 19];
        var pocketSize = [26, 20];
        
        if (gameCanvas.width >= gameCanvas.height){        
          cols = desktopSize[0];
          rows = desktopSize[1];
        }else{
          cols = pocketSize[0];
          rows = pocketSize[1];
        }
      
        cc_termclear("gray", "black");
        //cc_draw(2,2, "Hello World!", "black", "lime");
        
      }
      
      //all cc_ functions pass/take 1-based x/y coord offsets!
      var cc_draw = function(x, y, str, color, bgcolor){
      
        //subtract one to convert to 0-based offset
        x = Math.floor(x-1);
        y = Math.floor(y-1);
      
        for (var i = 0, len = str.length; i < len; i++) {
          if (pixels[y] && pixels[y][x + i]){
            pixels[y][x + i].color = color;
            pixels[y][x + i].bgcolor = bgcolor;
            pixels[y][x + i].string = str[i];
          }            
        }
      
      }
      
      var cc_termclear = function(color, bgcolor){
        for(var y = 0; y < rows; y++){
          pixels[y] =  [];
          for(var x = 0; x < cols; x++){
            pixels[y][x] = {color: color, bgcolor: bgcolor, string: ''};
          }
        }
      }
      
      
      var loadXML = function(id){
        currentPageID = id;
        $.get( "http://api.enderweb.com/getPage/" + id, function( data ) {
          xmlDoc = $.parseXML(data);
          pageScroll = 0;
          localPageDOM = $(xmlDoc);
        });
      }
      var loadXMLString = function(text){
        console.info(text);
        currentPageID = "-TEST-";
        xmlDoc = $.parseXML(text);
        //pageScroll = 0;
        localPageDOM = $(xmlDoc);
        return true;
      }
      
      cc_loadXMLString = function(text){ return loadXMLString(text); }
      
      var localPageDOM = {};
      loadXML(currentPageID);
      //console.info(localPageDOM.find('body'));
      
      //Stolen Shamelessly from nPaintPro (and converted to javascript) - http://pastebin.com/4QmTuJGU
      var drawPictureTable = function( xinit, yinit, width, image, align){        
        
        var imageWidth = 0;
        for(var y = 0; y<image.length; y++){
          for(var x = 0; x<image[y].length; x++){
            if (x > imageWidth) imageWidth = x;          
          }
        }
        
        var height = image.length;
        
        var alignOffset = 0;
        if (align == "center"){
          alignOffset = Math.ceil(width /2 - imageWidth /2);
        }else if(align == "right"){
          alignOffset = width - imageWidth;
        }
        
        for(var y = 0; y<image.length; y++){
          for(var x = 0; x<image[y].length; x++){
            
            var col = colors_assoc[image[y][x]];
            if (col){
              //console.info([xinit + x-1 + alignOffset, yinit + y, " ", col, col]);
              cc_draw(xinit + x-1 + alignOffset, yinit + y, " ", col, col);
            }
          }
        }
        return height;        
      }
      //[[End Theft]]
      
      var cc_writeTextBlock = function(x, y, width, text, align, fill, color, bgcolor){
      
        var words = text.split(' ');
        if (words == "") words = " ";
        
        var lines = [];
        var curLine = 0;
        var strLen = 0;
        
        for (var i=0; i<words.length; i++){
        
          var word = words[i];
          if (word != ""){
            strLen = strLen + word.length
            
            if (!lines[curLine]){
              lines[curLine] = [];
            }

            var wordSpaceLen = lines[curLine].length-1   
            
            if (strLen + wordSpaceLen >= width){
              curLine = curLine + 1;
              lines[curLine] = [];
              strLen = word.length //this needs to be carried over so we don't accidentally let words hang off the screen
            }
            
            lines[curLine].push(word);
          
          }
        }
        for (var i=0; i<lines.length; i++){
            
          var line = lines[i];
          if (line){
            var text = line.join(' ');
            
            var offX = 0;
            if (align == "left"){
              offX = 0;
            }else if(align == "center"){
              offX = width/2 - (text.length-1)/2;
            }else if(align == "right"){
              offX = width - text.length;
            }
            if (fill == true){
              cc_draw(x, y + i, " ".repeat(width), color, bgcolor);
            }
            //console.info(['xxx', x + offX, y + i, text, color, bgcolor]);
            cc_draw(x + offX, y + i, text, color, bgcolor);
          }
        }
          
        return curLine+1; //offset to 1-based index
      }
      
      function pad (str, max) {
        str = str.toString();
        return str.length < max ? pad("0" + str, max) : str;
      }
      var cc_updateTitle = function(){
        //writeTextBlock(term, 1, 1, w, "@ " .. currentPageID, "left", true)
        //cc_draw(1,1, "Hello World!", "black", "lime");
        
        
        if (tmpKeyCode){
          cc_writeTextBlock(1,1, cols, "@ " + "-".repeat(6), "left", true, "gray", "lightgray");
          cc_writeTextBlock(1,1, cols, "@", "left", false, "black", "lightgray");
          cc_writeTextBlock(9 - tmpKeyCode.length,1, cols, tmpKeyCode, "left", false, "black", "lightgray");
        }else{
          cc_writeTextBlock(1,1, cols, "@ " + pad(currentPageID, 6), "left", true, "gray", "lightgray");
        }       
        
      }
      var cc_updatePage = function(){
        cc_updateTitle();
      }
      
      var cc_renderDOM = function(){
      
        if (!localPageDOM.find) return;
      
        var body = $(localPageDOM.find('body'));
        var children = body.children();
        
        var defaultColor = body.attr("color") ? body.attr("color") : "black";
        var defaultBGColor = body.attr("bgcolor") ? body.attr("bgcolor") : "white";
          
        
        cc_termclear(defaultColor, defaultBGColor);
        cc_updatePage();
        
        totalLines = 0; //global
        
        var pageOffset = 1 + pageScroll + 1;
        var extraOffset = 0;
        
        //--totalLines = #children --fix
        for (var i in children){
          if (children.hasOwnProperty(i)){
            var child = $(children[i]);
            
            var setColor = child.attr("color") ? child.attr("color") : defaultColor;
            var setBGColor = child.attr("bgcolor") ? child.attr("bgcolor") : defaultBGColor;
            
            if (child.prop("tagName") == "div"){
              var fill = child.attr("fill") == "true";
              var align = child.attr("align") ? child.attr("align") : "left";
              //console.info([1, pageOffset+totalLines, cols, child.text(), align, fill, setColor, setBGColor]);
              totalLines = totalLines + cc_writeTextBlock(1, pageOffset+totalLines, cols, child.text(), align, fill, setColor, setBGColor);
            
            }else if(child.prop("tagName") == "drawing"){  
              var scanLines = [];
              var image = child.find('image').text().replace(/[\r\n]?/, "");
              if (image){
                var matches = image.split(/\+/);
                for (var m in matches){
                  scanLines.push( matches[m] );                  
                }
              }              
              var align = child.attr("align") ? child.attr("align") : "left";              
              totalLines = totalLines + drawPictureTable(1, pageOffset+totalLines, cols, scanLines, align);
            
            
            }else if(child.prop("tagName") == "listing"){
              cc_writeTextBlock(1, pageOffset+totalLines, cols, ".".repeat(cols), "left", true, 'lightgray', setBGColor);
              cc_writeTextBlock(1, pageOffset+totalLines, cols, child.text(), "left", false, setColor, setBGColor);
              cc_writeTextBlock(1, pageOffset+totalLines, cols, child.attr("id"), "right", false, 'blue', setBGColor);
              totalLines = totalLines + 1;
            
            }else{
              totalLines = totalLines + 1;
            }
            
          }
        }

        
        cc_updatePage();
      
      }
      
      var colors_assoc = {
        '0': 'white',
        '1': 'orange',
        '2': 'magenta',
        '3': 'lightblue',
        '4': 'yellow',
        '5': 'lime',
        '6': 'pink',
        '7': 'gray',
        '8': 'lightgray',
        '9': 'cyan',
        'a': 'purple',
        'b': 'blue',
        'c': 'brown',
        'd': 'green',
        'e': 'red',
        'f': 'black'      
      };
      var colors = {
        'white': '#F0F0F0',
        'orange': '#F2B233',
        'magenta': '#E57FD8',
        'lightblue': '#99B2F2',
        'yellow': '#DEDE6C',
        'lime': '#7FCC19',
        'pink': '#F2B2CC',
        'gray': '#4C4C4C',
        'lightgray': '#999999',
        'cyan': '#4C99B2',
        'purple': '#B266E5',
        'blue': '#3366CC',
        'brown': '#7F664C',
        'green': '#57A64E',
        'red': '#CC4C4C',
        'black': '#191919'
      };
      var getHexColorByName = function(color){
        return colors[color];
      }
      
      var once = false;
      var draw = function(){  
        
        cc_renderDOM(); //emulate the environment for a tick
        
        ctx.save();
        
        var width = (gameCanvas.width - (border_width * 2)) / cols;
        var height = (gameCanvas.height - (border_height * 2)) / rows;
        
        var fontSize = 1;
        var font = "1px monospace";
        for (var n = 1; n<=100; n++){
          font = n + "px monospace";
          ctx.font = font;
          if (ctx.measureText("W", font).width > width || n > height){
            fontSize = n;
            break;
          }
        }        
        
        var total = 0;
        for(var y = 0; y < rows; y++){
          //total++;
          for(var x = 0; x < cols; x++){
            var xx = x * width + border_width;
            var yy = y * height + border_height
            ctx.fillStyle = getHexColorByName(pixels[y][x].bgcolor);
            ctx.fillRect( xx, yy, width, height);            
            ctx.fillStyle = getHexColorByName(pixels[y][x].color);
            ctx.textBaseline = 'middle';
            var offset = width /2 - ctx.measureText(pixels[y][x].string).width/2;
            ctx.fillText(pixels[y][x].string, xx + offset, yy + height/2);
            
          }
        }
        
        //ctx.strokeStyle = "#000";
        //ctx.lineWidth = 0;
        //ctx.strokeRect( border_width, border_height, gameCanvas.width - border_width * 2, gameCanvas.height - border_height * 2);            
        
        ctx.restore();
      }
      
      var resizeGame = function() {
        gameCanvas.width = gameArea.width();
        gameCanvas.height = gameArea.height();
        
        centerX = window.innerWidth/2;
        centerY = window.innerHeight/2;    
        
        resizePixels();
      }
      
      window.addEventListener('resize', resizeGame, false);
      window.addEventListener('orientationchange', resizeGame, false);
      resizeGame();
      setInterval(draw, 1);  
      
      /*
      var mousedown = false;
      var mousedownX = 0;
      var mousedownY = 0;
      $(document).on('mousedown vmousedown', function(e){
        mousedown = true;
        //console.info(e);
        mousedownX = e.clientX + offsetX;
        mousedownY = e.clientY + offsetY;
      });
      $(document).on('mousemove vmousemove', function(e){
        if (mousedown){
          offsetX = mousedownX - e.clientX;
          offsetY = mousedownY - e.clientY;
        }
      });
      $(document).on('mouseup vmouseup', function(e){
        mousedown = false;
        offsetX = mousedownX - e.clientX;
        offsetY = mousedownY - e.clientY;
      });
      */
      
    });

    </script>
  </head>

  <body>
    <div id="containerCanvas">
      <canvas id="mainCanvas" style="width: 100%; height: 100%"></canvas>
    </div>
    <div id="mobileControls">
      <form onsubmit="return false;">
        <div class="input-group input-group-lg">
          <span class="input-group-addon" id="sizing-addon1">@</span>
          <input type="text" class="form-control" placeholder="EnderPage ID" id="mobileLoader">
          <span class="input-group-btn">
            <button class="btn btn-default" type="submit" id="gotime">Go!</button>
          </span>
        </div>
      </form>
    </div>
    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
      ga('create', 'UA-70092574-1', 'auto');
      ga('send', 'pageview');
    </script>
  </body>
</html>
